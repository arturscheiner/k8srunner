#!/bin/bash
#Kubectl Runner Script
#By Artur Scheiner

#Check if the input arguments are base64 encoded
# B64CHECK="^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)?$"

# if [[ -z $1 ]]; then echo "Cannot run without arguments"; exit 1; fi
# if [[ $# < 5 ]]; then echo "One or more crunner arguments is missing!"; exit 2; fi
# if [[ ! $1 =~ $B64CHECK ]]; then echo "The command or engine must be base64 encoded!"; exit 3; fi
# if [[ ! $2 =~ $B64CHECK ]]; then echo "The command options must be base64 encoded!"; exit 4; fi
# if [[ ! $3 =~ $B64CHECK ]]; then echo "The extension must be base64 encoded!"; exit 5; fi
# if [[ ! $4 =~ $B64CHECK ]]; then echo "The code must be base64 encoded!"; exit 6; fi
# if [[ ! $5 =~ $B64CHECK ]]; then echo "The isjson must be base64 encoded!"; exit 7; fi
# if [[ ! $6 =~ $B64CHECK ]]; then echo "The code arguments must be base64 encoded!"; exit 7; fi

#Define the variable that represents the engine binary name
COMMAND=$(echo $1 | base64 -d)
RESOURCE=$(echo $2 | base64 -d)
NAME=$(echo $3 | base64 -d)
ARGS=$(echo $4 | base64 -d)
NAMESPACE=$(echo $5 | base64 -d)
YAMLB64=$6
ISJSON="$(echo $7 | base64 -d)"
CALLBACK="$(echo $8 | base64 -d)"
URL="$(echo $9 | base64 -d)"
APIKEY="$(echo $10 | base64 -d)"

EXT="yaml"
YAML="$(echo $YAMLB64 | base64 -d)"


#Generate a UUID
UUID=$(uuidgen -r)

#Collection PATH
COLLECTION="$HOME/.kuberuns/$COMMAND"
YAMLFILE="$COLLECTION/$UUID/kube.$EXT"
YAMLB64FILE="$COLLECTION/$UUID/kube.b64.$EXT"
YAMLERRFILE="$COLLECTION/$UUID/kube.$EXT.err"
YAMLRESJSON="$COLLECTION/$UUID/kube.$EXT.result.json"
YAMLTIMJSON="$COLLECTION/$UUID/kube.$EXT.time.json"
YAMLOUTPUT="$COLLECTION/$UUID/kube.$EXT.output.txt"
RECEIVEDARGS="$COLLECTION/$UUID/crunner.received.args.log"
DECODEDARGS="$COLLECTION/$UUID/crunner.decoded.args.log"
CALLBACKLOG="$COLLECTION/$UUID/callback.log"

#Create kube collection folder
mkdir -p $COLLECTION/$UUID

#Echoes the received arguments to a log file
echo $# $@ > $RECEIVEDARGS
echo "$COMMAND $RESOURCE $NAME $NAMESPACE $ARGS"  > $DECODEDARGS

#Generates a file on the temp dir of the remote host enconded in b64
echo "$YAMLB64" > $YAMLB64FILE

#Convert the encoded b64 a kube file on the username home directory
echo "$YAML" > $YAMLFILE

payload(){
    DEPLOY=$1
    NAMESPACE=$2
    STATUS=$3
    PAYLOAD="{\"deploy-name\": \"$DEPLOY\", \"deploy-namespace\": \"$NAMESPACE\", \"deploy-status\": \"$STATUS\"}"

    echo $PAYLOAD
}

rolloutStatus(){
    STATUS=$(kubectl rollout status deploy $NAME  | grep "rolled out")

    if [[ $STATUS == "" ]]; then
        echo "error"
    else
        echo "success"
    fi
}

callback() {
    PAYLOAD=$(payload $NAME $NAMESPACE $(rolloutStatus))

    curl $URL -X POST -s \
    -H 'authority: core.godigibee.io' \
    -H 'accept: */*' \
    -H 'accept-language: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7' \
    -H "apikey: $APIKEY" \
    -H 'content-type: application/json' \
    -H 'origin: https://www.godigibee.io' \
    -H 'referer: https://www.godigibee.io/' \
    -H 'sec-ch-ua: "Chromium";v="110", "Not A(Brand";v="24", "Google Chrome";v="110"' \
    -H 'sec-ch-ua-mobile: ?0' \
    -H 'sec-ch-ua-platform: "macOS"' \
    -H 'sec-fetch-dest: empty' \
    -H 'sec-fetch-mode: cors' \
    -H 'sec-fetch-site: same-site' \
    -H 'user-agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36' \
    --data-raw "$PAYLOAD" \
    --compressed
}

#Execute the kube using its engine and arguments
#Use the ISJSON variable to deal with the output
if [[ $ISJSON == "true" ]]; then
    if [[ ! -z $YAML ]]; then
        kubectl $COMMAND -f $YAMLFILE $NAMESPACE -o json
    else
        kubectl $COMMAND $RESOURCE $NAME $NAMESPACE $ARGS -o json
    fi
else
    if [[ ! -z $YAML ]]; then
        kubectl $COMMAND -f $YAMLFILE $NAMESPACE
    else
        kubectl $COMMAND $RESOURCE $NAME $NAMESPACE $ARGS
    fi
fi

#Execute the CALLBACK function in background
#Use the CALLBACK variable to deal with the output
if [[ $CALLBACK == "true" ]]; then
    callback > $CALLBACKLOG &
fi